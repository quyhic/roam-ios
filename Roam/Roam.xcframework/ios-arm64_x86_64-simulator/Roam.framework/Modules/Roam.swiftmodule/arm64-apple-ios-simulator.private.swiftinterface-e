// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Roam
import AWSCore
import AWSIoT
import AWSMobileClientXCF
import CommonCrypto
import CoreBluetooth
import CoreData
import CoreLocation
import CoreMotion
import CoreTelephony
import CryptoKit
import Darwin
import Dispatch
import ExternalAccessory
import Foundation
import MachO
import MqttCocoaAsyncSocket
import Network
import ObjectiveC
@_exported import Roam
import Starscream
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum RoamMqttConnectionType : Swift.Int {
  case TCP
  case WS
  case WSS
  case SSL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RoamConnector {
  @objc var clientID: Swift.String { get }
}
@objc public class RoamMqttConnectOptions : ObjectiveC.NSObject {
  public init(keepAliveInterval: Swift.UInt16, cleanSession: Swift.Bool, connectionTimeout: Swift.Double, autoReconnect: Swift.Bool)
  @objc deinit
}
@objc public class RoamMqttWillOptions : ObjectiveC.NSObject {
  public init(willTopic: Swift.String, willPayload: Swift.String, willQos: Swift.Int, retain: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodePubAck : ObjectiveC.NSObject {
  public var reasonCode: Roam.CocoaMQTTPUBACKReasonCode?
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodePubAck(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodePubRec : ObjectiveC.NSObject {
  public var reasonCode: Roam.CocoaMQTTPUBACKReasonCode?
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodePubRec(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
public protocol AnyOptional {
  var isNil: Swift.Bool { get }
}
extension Swift.Optional : Roam.AnyOptional {
  public var isNil: Swift.Bool {
    get
  }
}
@objc public enum CocoaMQTTQoS : Swift.UInt8, Swift.CustomStringConvertible {
  case qos0 = 0
  case qos1
  case qos2
  case FAILURE = 0x80
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension Roam.CocoaMQTTQoS : Swift.Comparable {
  public static func < (lhs: Roam.CocoaMQTTQoS, rhs: Roam.CocoaMQTTQoS) -> Swift.Bool
  public static func <= (lhs: Roam.CocoaMQTTQoS, rhs: Roam.CocoaMQTTQoS) -> Swift.Bool
  public static func > (lhs: Roam.CocoaMQTTQoS, rhs: Roam.CocoaMQTTQoS) -> Swift.Bool
  public static func >= (lhs: Roam.CocoaMQTTQoS, rhs: Roam.CocoaMQTTQoS) -> Swift.Bool
}
@objc public enum CocoaMQTTConnState : Swift.UInt8, Swift.CustomStringConvertible {
  case disconnected = 0
  case connecting
  case connected
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public protocol CocoaMQTT5Delegate {
  @objc func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didConnectAck ack: Roam.CocoaMQTTCONNACKReasonCode, connAckData: Roam.MqttDecodeConnAck?)
  @objc func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didPublishMessage message: Roam.CocoaMQTT5Message, id: Swift.UInt16)
  @objc func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didPublishAck id: Swift.UInt16, pubAckData: Roam.MqttDecodePubAck?)
  @objc func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didPublishRec id: Swift.UInt16, pubRecData: Roam.MqttDecodePubRec?)
  @objc func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didReceiveMessage message: Roam.CocoaMQTT5Message, id: Swift.UInt16, publishData: Roam.MqttDecodePublish?)
  @objc func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didSubscribeTopics success: Foundation.NSDictionary, failed: [Swift.String], subAckData: Roam.MqttDecodeSubAck?)
  @objc func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didUnsubscribeTopics topics: [Swift.String], unsubAckData: Roam.MqttDecodeUnsubAck?)
  @objc func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didReceiveDisconnectReasonCode reasonCode: Roam.CocoaMQTTDISCONNECTReasonCode)
  @objc func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didReceiveAuthReasonCode reasonCode: Roam.CocoaMQTTAUTHReasonCode)
  @objc func mqtt5DidPing(_ mqtt5: Roam.CocoaMQTT5)
  @objc func mqtt5DidReceivePong(_ mqtt5: Roam.CocoaMQTT5)
  @objc func mqtt5DidDisconnect(_ mqtt5: Roam.CocoaMQTT5, withError err: (any Swift.Error)?)
  @objc optional func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc optional func mqtt5UrlSession(_ mqtt: Roam.CocoaMQTT5, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc optional func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didPublishComplete id: Swift.UInt16, pubCompData: Roam.MqttDecodePubComp?)
  @objc optional func mqtt5(_ mqtt5: Roam.CocoaMQTT5, didStateChangeTo state: Roam.CocoaMQTTConnState)
}
public func setMqtt5Version()
@objc public class CocoaMQTT5 : ObjectiveC.NSObject {
  weak public var delegate: (any Roam.CocoaMQTT5Delegate)?
  public var host: Swift.String
  public var port: Swift.UInt16
  public var clientID: Swift.String
  public var username: Swift.String?
  public var password: Swift.String?
  public var cleanSession: Swift.Bool
  public var willMessage: Roam.CocoaMQTT5Message?
  public var backgroundOnSocket: Swift.Bool {
    get
    set
  }
  public var delegateQueue: Dispatch.DispatchQueue
  public var connState: Roam.CocoaMQTTConnState {
    get
    set
  }
  public var deliverTimeout: Swift.Double {
    get
    set
  }
  public var messageQueueSize: Swift.UInt {
    get
    set
  }
  public var inflightWindowSize: Swift.UInt {
    get
    set
  }
  public var keepAlive: Swift.UInt16
  public var autoReconnect: Swift.Bool
  public var autoReconnectTimeInterval: Swift.UInt16
  public var maxAutoReconnectTimeInterval: Swift.UInt16
  public var connectProperties: Roam.MqttConnectProperties?
  public var authProperties: Roam.MqttAuthProperties?
  public var logLevel: Roam.CocoaMQTTLoggerLevel {
    get
    set
  }
  public var enableSSL: Swift.Bool {
    get
    set
  }
  public var sslSettings: [Swift.String : ObjectiveC.NSObject]? {
    get
    set
  }
  public var allowUntrustCACertificate: Swift.Bool {
    get
    set
  }
  public var subscriptions: Roam.ThreadSafeDictionary<Swift.String, Roam.CocoaMQTTQoS>
  public var didConnectAck: (Roam.CocoaMQTT5, Roam.CocoaMQTTCONNACKReasonCode, Roam.MqttDecodeConnAck?) -> Swift.Void
  public var didPublishMessage: (Roam.CocoaMQTT5, Roam.CocoaMQTT5Message, Swift.UInt16) -> Swift.Void
  public var didPublishAck: (Roam.CocoaMQTT5, Swift.UInt16, Roam.MqttDecodePubAck?) -> Swift.Void
  public var didPublishRec: (Roam.CocoaMQTT5, Swift.UInt16, Roam.MqttDecodePubRec?) -> Swift.Void
  public var didReceiveMessage: (Roam.CocoaMQTT5, Roam.CocoaMQTT5Message, Swift.UInt16, Roam.MqttDecodePublish?) -> Swift.Void
  public var didSubscribeTopics: (Roam.CocoaMQTT5, Foundation.NSDictionary, [Swift.String], Roam.MqttDecodeSubAck?) -> Swift.Void
  public var didUnsubscribeTopics: (Roam.CocoaMQTT5, [Swift.String], Roam.MqttDecodeUnsubAck?) -> Swift.Void
  public var didPing: (Roam.CocoaMQTT5) -> Swift.Void
  public var didReceivePong: (Roam.CocoaMQTT5) -> Swift.Void
  public var didDisconnect: (Roam.CocoaMQTT5, (any Swift.Error)?) -> Swift.Void
  public var didDisconnectReasonCode: (Roam.CocoaMQTT5, Roam.CocoaMQTTDISCONNECTReasonCode) -> Swift.Void
  public var didAuthReasonCode: (Roam.CocoaMQTT5, Roam.CocoaMQTTAUTHReasonCode) -> Swift.Void
  public var didReceiveTrust: (Roam.CocoaMQTT5, Security.SecTrust, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void
  public var didCompletePublish: (Roam.CocoaMQTT5, Swift.UInt16, Roam.MqttDecodePubComp?) -> Swift.Void
  public var didChangeState: (Roam.CocoaMQTT5, Roam.CocoaMQTTConnState) -> Swift.Void
  public init(clientID: Swift.String, host: Swift.String = "localhost", port: Swift.UInt16 = 1883, socket: any Roam.CocoaMQTTSocketProtocol = CocoaMQTTSocket())
  @objc deinit
  public func connect() -> Swift.Bool
  public func connect(timeout: Foundation.TimeInterval) -> Swift.Bool
  public func disconnect()
  public func disconnect(reasonCode: Roam.CocoaMQTTDISCONNECTReasonCode, userProperties: [Swift.String : Swift.String])
  public func ping()
  @discardableResult
  public func publish(_ topic: Swift.String, withString string: Swift.String, qos: Roam.CocoaMQTTQoS = .qos1, DUP: Swift.Bool = false, retained: Swift.Bool = false, properties: Roam.MqttPublishProperties) -> Swift.Int
  @discardableResult
  public func publish(_ message: Roam.CocoaMQTT5Message, DUP: Swift.Bool = false, retained: Swift.Bool = false, properties: Roam.MqttPublishProperties) -> Swift.Int
  public func subscribe(_ topic: Swift.String, qos: Roam.CocoaMQTTQoS = .qos1)
  public func subscribe(_ topics: [Roam.MqttSubscription])
  public func subscribe(_ topics: [Roam.MqttSubscription], packetIdentifier: Swift.UInt16? = nil, subscriptionIdentifier: Swift.UInt32? = nil, userProperty: [Swift.String : Swift.String] = [:])
  public func unsubscribe(_ topic: Swift.String)
  public func unsubscribe(_ topics: [Roam.MqttSubscription])
  public func auth(reasonCode: Roam.CocoaMQTTAUTHReasonCode, authProperties: Roam.MqttAuthProperties)
}
extension Roam.CocoaMQTT5 : Roam.CocoaMQTTSocketDelegate {
  public func socketConnected(_ socket: any Roam.CocoaMQTTSocketProtocol)
  public func socket(_ socket: any Roam.CocoaMQTTSocketProtocol, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func socketUrlSession(_ socket: any Roam.CocoaMQTTSocketProtocol, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  public func socketDidSecure(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket)
  public func socket(_ socket: any Roam.CocoaMQTTSocketProtocol, didWriteDataWithTag tag: Swift.Int)
  public func socket(_ socket: any Roam.CocoaMQTTSocketProtocol, didRead data: Foundation.Data, withTag tag: Swift.Int)
  public func socketDidDisconnect(_ socket: any Roam.CocoaMQTTSocketProtocol, withError err: (any Swift.Error)?)
}
@objc public enum LocationAccuracy : Swift.Int {
  case kCLLocationAccuracyBestForNavigation = 1
  case kCLLocationAccuracyBest
  case kCLLocationAccuracyNearestTenMeters
  case kCLLocationAccuracyHundredMeters
  case kCLLocationAccuracyKilometer
  case kCLLocationAccuracyThreeKilometers
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class RoamTrackingCustomMethods : ObjectiveC.NSObject {
  public static let sharedInstance: Roam.RoamTrackingCustomMethods
  public var desiredAccuracy: Roam.LocationAccuracy?
  public var useVisits: Swift.Bool?
  public var showsBackgroundLocationIndicator: Swift.Bool?
  public var distanceFilter: CoreLocation.CLLocationDistance?
  public var useSignificant: Swift.Bool?
  public var useRegionMonitoring: Swift.Bool?
  public var useDynamicGeofencRadius: Swift.Bool?
  public var geofenceRadius: Swift.Int?
  public var allowBackgroundLocationUpdates: Swift.Bool?
  public var activityType: CoreLocation.CLActivityType?
  public var pausesLocationUpdatesAutomatically: Swift.Bool?
  public var useStandardLocationServices: Swift.Bool?
  public var accuracyFilter: Swift.Int?
  public var updateInterval: Swift.Int?
  @objc override dynamic public init()
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (Roam.Reachability) -> ()
  public typealias NetworkUnreachable = (Roam.Reachability) -> ()
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: Roam.Reachability.NetworkStatus, b: Roam.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: Roam.Reachability.Connection, b: Roam.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: Roam.Reachability.NetworkReachable?
  public var whenUnreachable: Roam.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: Roam.Reachability.Connection {
    get
  }
  public var connection: Roam.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Roam.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MqttDecodePubComp : ObjectiveC.NSObject {
  public var reasonCode: Roam.CocoaMQTTPUBCOMPReasonCode?
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodePubComp(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
public protocol CocoaMQTTSocketDelegate : AnyObject {
  func socketConnected(_ socket: any Roam.CocoaMQTTSocketProtocol)
  func socket(_ socket: any Roam.CocoaMQTTSocketProtocol, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  func socketUrlSession(_ socket: any Roam.CocoaMQTTSocketProtocol, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  func socket(_ socket: any Roam.CocoaMQTTSocketProtocol, didWriteDataWithTag tag: Swift.Int)
  func socket(_ socket: any Roam.CocoaMQTTSocketProtocol, didRead data: Foundation.Data, withTag tag: Swift.Int)
  func socketDidDisconnect(_ socket: any Roam.CocoaMQTTSocketProtocol, withError err: (any Swift.Error)?)
}
public protocol CocoaMQTTSocketProtocol {
  var enableSSL: Swift.Bool { get set }
  func setDelegate(_ theDelegate: (any Roam.CocoaMQTTSocketDelegate)?, delegateQueue: Dispatch.DispatchQueue?)
  func connect(toHost host: Swift.String, onPort port: Swift.UInt16) throws
  func connect(toHost host: Swift.String, onPort port: Swift.UInt16, withTimeout timeout: Foundation.TimeInterval) throws
  func disconnect()
  func readData(toLength length: Swift.UInt, withTimeout timeout: Foundation.TimeInterval, tag: Swift.Int)
  func write(_ data: Foundation.Data, withTimeout timeout: Foundation.TimeInterval, tag: Swift.Int)
}
@objc @_inheritsConvenienceInitializers public class CocoaMQTTSocket : ObjectiveC.NSObject {
  public var backgroundOnSocket: Swift.Bool
  public var enableSSL: Swift.Bool
  public var sslSettings: [Swift.String : ObjectiveC.NSObject]?
  public var allowUntrustCACertificate: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension Roam.CocoaMQTTSocket : Roam.CocoaMQTTSocketProtocol {
  public func setDelegate(_ theDelegate: (any Roam.CocoaMQTTSocketDelegate)?, delegateQueue: Dispatch.DispatchQueue?)
  public func connect(toHost host: Swift.String, onPort port: Swift.UInt16) throws
  public func connect(toHost host: Swift.String, onPort port: Swift.UInt16, withTimeout timeout: Foundation.TimeInterval) throws
  public func disconnect()
  public func readData(toLength length: Swift.UInt, withTimeout timeout: Foundation.TimeInterval, tag: Swift.Int)
  public func write(_ data: Foundation.Data, withTimeout timeout: Foundation.TimeInterval, tag: Swift.Int)
}
extension Roam.CocoaMQTTSocket : MqttCocoaAsyncSocket.MGCDAsyncSocketDelegate {
  @objc dynamic public func socket(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket, didConnectToHost host: Swift.String, port: Swift.UInt16)
  @objc dynamic public func socket(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func socketDidSecure(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket)
  @objc dynamic public func socket(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket, didWriteDataWithTag tag: Swift.Int)
  @objc dynamic public func socket(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket, didRead data: Foundation.Data, withTag tag: Swift.Int)
  @objc dynamic public func socketDidDisconnect(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket, withError err: (any Swift.Error)?)
}
@objc public class CocoaMQTTMessage : ObjectiveC.NSObject {
  public var qos: Roam.CocoaMQTTQoS
  public var topic: Swift.String
  public var payload: [Swift.UInt8]
  public var retained: Swift.Bool
  public var duplicated: Swift.Bool
  public var string: Swift.String? {
    get
  }
  public init(topic: Swift.String, string: Swift.String, qos: Roam.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false)
  public init(topic: Swift.String, payload: [Swift.UInt8], qos: Roam.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false)
  @objc deinit
}
extension Roam.CocoaMQTTMessage {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@_hasMissingDesignatedInitializers @objc public class RoamTripSummaryRoute : ObjectiveC.NSObject {
  @objc public var activity: Swift.String?
  @objc public var altitude: Foundation.NSNumber
  @objc public var elevationGain: Foundation.NSNumber
  @objc public var distance: Foundation.NSNumber
  @objc public var duration: Foundation.NSNumber
  @objc public var coordinates: [Swift.Double]?
  @objc public var recordedAt: Swift.String?
  @objc deinit
}
@objc public enum CocoaMQTTConnAck : Swift.UInt8, Swift.CustomStringConvertible {
  case accept = 0
  case unacceptableProtocolVersion
  case identifierRejected
  case serverUnavailable
  case badUsernameOrPassword
  case notAuthorized
  case reserved
  public init(byte: Swift.UInt8)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public protocol CocoaMQTTDelegate {
  @objc func mqtt(_ mqtt: Roam.CocoaMQTT, didConnectAck ack: Roam.CocoaMQTTConnAck)
  @objc func mqtt(_ mqtt: Roam.CocoaMQTT, didPublishMessage message: Roam.CocoaMQTTMessage, id: Swift.UInt16)
  @objc func mqtt(_ mqtt: Roam.CocoaMQTT, didPublishAck id: Swift.UInt16)
  @objc func mqtt(_ mqtt: Roam.CocoaMQTT, didReceiveMessage message: Roam.CocoaMQTTMessage, id: Swift.UInt16)
  @objc func mqtt(_ mqtt: Roam.CocoaMQTT, didSubscribeTopics success: Foundation.NSDictionary, failed: [Swift.String])
  @objc func mqtt(_ mqtt: Roam.CocoaMQTT, didUnsubscribeTopics topics: [Swift.String])
  @objc func mqttDidPing(_ mqtt: Roam.CocoaMQTT)
  @objc func mqttDidReceivePong(_ mqtt: Roam.CocoaMQTT)
  @objc func mqttDidDisconnect(_ mqtt: Roam.CocoaMQTT, withError err: (any Swift.Error)?)
  @objc optional func mqtt(_ mqtt: Roam.CocoaMQTT, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc optional func mqttUrlSession(_ mqtt: Roam.CocoaMQTT, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc optional func mqtt(_ mqtt: Roam.CocoaMQTT, didPublishComplete id: Swift.UInt16)
  @objc optional func mqtt(_ mqtt: Roam.CocoaMQTT, didStateChangeTo state: Roam.CocoaMQTTConnState)
}
public func setMqtt3Version()
@objc public class CocoaMQTT : ObjectiveC.NSObject {
  weak public var delegate: (any Roam.CocoaMQTTDelegate)?
  public var host: Swift.String
  public var port: Swift.UInt16
  public var clientID: Swift.String
  public var username: Swift.String?
  public var password: Swift.String?
  public var cleanSession: Swift.Bool
  public var willMessage: Roam.CocoaMQTTMessage?
  public var backgroundOnSocket: Swift.Bool {
    get
    set
  }
  public var delegateQueue: Dispatch.DispatchQueue
  public var connState: Roam.CocoaMQTTConnState {
    get
    set
  }
  public var deliverTimeout: Swift.Double {
    get
    set
  }
  public var messageQueueSize: Swift.UInt {
    get
    set
  }
  public var inflightWindowSize: Swift.UInt {
    get
    set
  }
  public var keepAlive: Swift.UInt16
  public var autoReconnect: Swift.Bool
  public var autoReconnectTimeInterval: Swift.UInt16
  public var maxAutoReconnectTimeInterval: Swift.UInt16
  public var logLevel: Roam.CocoaMQTTLoggerLevel {
    get
    set
  }
  public var enableSSL: Swift.Bool {
    get
    set
  }
  public var sslSettings: [Swift.String : ObjectiveC.NSObject]? {
    get
    set
  }
  public var allowUntrustCACertificate: Swift.Bool {
    get
    set
  }
  public var subscriptions: [Swift.String : Roam.CocoaMQTTQoS]
  public var didConnectAck: (Roam.CocoaMQTT, Roam.CocoaMQTTConnAck) -> Swift.Void
  public var didPublishMessage: (Roam.CocoaMQTT, Roam.CocoaMQTTMessage, Swift.UInt16) -> Swift.Void
  public var didPublishAck: (Roam.CocoaMQTT, Swift.UInt16) -> Swift.Void
  public var didReceiveMessage: (Roam.CocoaMQTT, Roam.CocoaMQTTMessage, Swift.UInt16) -> Swift.Void
  public var didSubscribeTopics: (Roam.CocoaMQTT, Foundation.NSDictionary, [Swift.String]) -> Swift.Void
  public var didUnsubscribeTopics: (Roam.CocoaMQTT, [Swift.String]) -> Swift.Void
  public var didPing: (Roam.CocoaMQTT) -> Swift.Void
  public var didReceivePong: (Roam.CocoaMQTT) -> Swift.Void
  public var didDisconnect: (Roam.CocoaMQTT, (any Swift.Error)?) -> Swift.Void
  public var didReceiveTrust: (Roam.CocoaMQTT, Security.SecTrust, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void
  public var didCompletePublish: (Roam.CocoaMQTT, Swift.UInt16) -> Swift.Void
  public var didChangeState: (Roam.CocoaMQTT, Roam.CocoaMQTTConnState) -> Swift.Void
  public init(clientID: Swift.String, host: Swift.String = "localhost", port: Swift.UInt16 = 1883, socket: any Roam.CocoaMQTTSocketProtocol = CocoaMQTTSocket())
  @objc deinit
  public func connect() -> Swift.Bool
  public func connect(timeout: Foundation.TimeInterval) -> Swift.Bool
  public func disconnect()
  public func ping()
  @discardableResult
  public func publish(_ topic: Swift.String, withString string: Swift.String, qos: Roam.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false) -> Swift.Int
  @discardableResult
  public func publish(_ message: Roam.CocoaMQTTMessage) -> Swift.Int
  public func subscribe(_ topic: Swift.String, qos: Roam.CocoaMQTTQoS = .qos1)
  public func subscribe(_ topics: [(Swift.String, Roam.CocoaMQTTQoS)])
  public func unsubscribe(_ topic: Swift.String)
  public func unsubscribe(_ topics: [Swift.String])
}
extension Roam.CocoaMQTT : Roam.CocoaMQTTSocketDelegate {
  public func socketConnected(_ socket: any Roam.CocoaMQTTSocketProtocol)
  public func socket(_ socket: any Roam.CocoaMQTTSocketProtocol, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func socketUrlSession(_ socket: any Roam.CocoaMQTTSocketProtocol, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  public func socketDidSecure(_ sock: MqttCocoaAsyncSocket.MGCDAsyncSocket)
  public func socket(_ socket: any Roam.CocoaMQTTSocketProtocol, didWriteDataWithTag tag: Swift.Int)
  public func socket(_ socket: any Roam.CocoaMQTTSocketProtocol, didRead data: Foundation.Data, withTag tag: Swift.Int)
  public func socketDidDisconnect(_ socket: any Roam.CocoaMQTTSocketProtocol, withError err: (any Swift.Error)?)
}
@_hasMissingDesignatedInitializers @objc public class RoamUser : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String
  @objc final public let userDescription: Swift.String?
  @objc public var geofenceEvents: Swift.Bool
  @objc public var eventsListener: Swift.Bool
  @objc public var locationListener: Swift.Bool
  @objc public var locationEvents: Swift.Bool
  @objc public var tripsEvents: Swift.Bool
  @objc public var nearbyEvents: Swift.Bool
  @objc final public let account_id: Swift.String
  @objc final public let project_id: Swift.String
  @objc public var metadata: Swift.Dictionary<Swift.String, Any>?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Roam : ObjectiveC.NSObject {
  @objc public static var delegate: (any Roam.RoamDelegate)! {
    @objc get
    @objc set
  }
  @objc public static func initialize(_ publishKey: Swift.String?, _ baseUrl: Swift.String? = nil, _ iOTEndPoint: Swift.String? = nil)
  @objc public static func createUser(_ description: Swift.String, _ metadata: Swift.Dictionary<Swift.String, Any>? = nil, handler: Roam.RoamUserCompletionhandler? = nil)
  @objc public static func getUser(_ userId: Swift.String, handler: Roam.RoamUserCompletionhandler? = nil)
  @objc public static func updateUser(_ description: Swift.String? = nil, _ metadata: Swift.Dictionary<Swift.String, Any>? = nil)
  @objc public static func logoutUser(handler: Roam.RoamLogoutCompletionhandler? = nil)
  @objc public static func setDeviceToken(_ deviceToken: Foundation.Data)
  @objc public static func startTracking(_ trackingMethod: Roam.RoamTrackingMode, options: Roam.RoamTrackingCustomMethods? = nil, handler: Roam.RoamStatusErrorHandler? = nil)
  @objc public static func stopTracking(handler: Roam.RoamStatusErrorHandler? = nil)
  @objc public static func requestLocation()
  @objc public static func isLocationEnabled() -> Swift.Bool
  @objc public static func isLocationTracking() -> Swift.Bool
  @objc public static func locationPermissionStatus() -> Swift.Int
  @objc public static func getCurrentLocation(_ accuracy: Swift.Int, handler: Roam.RoamCurrentLocationCompletionhandler? = nil)
  @objc public static func updateCurrentLocation(_ accuracy: Swift.Int, _ publish: Roam.RoamPublish? = nil)
  @objc public static func startTrip(_ tripId: Swift.String, handler: Roam.RoamTripCompletionhandlers? = nil)
  @objc public static func startTrip(_ trip: Roam.RoamTrip, _ trackingMethod: Roam.RoamTrackingMode = .active, _ options: Roam.RoamTrackingCustomMethods? = nil, handler: Roam.RoamTripCompletionhandlers? = nil)
  @objc public static func endTrip(_ tripId: Swift.String, _ forceStopTracking: Swift.Bool, handler: Roam.RoamTripCompletionhandlers? = nil)
  @objc public static func pauseTrip(_ tripId: Swift.String, handler: Roam.RoamTripCompletionhandlers? = nil)
  @objc public static func resumeTrip(_ tripId: Swift.String, handler: Roam.RoamTripCompletionhandlers? = nil)
  @objc public static func getActiveTrips(_ isLocal: Swift.Bool, handler: Roam.RoamActiveTripsCompletionhandler? = nil)
  @objc public static func deleteTrip(_ tripId: Swift.String, handler: Roam.RoamDeleteTripCompletionhandler? = nil)
  @objc public static func syncTrip(_ tripId: Swift.String, handler: Roam.RoamSyncTripCompletionhandler? = nil)
  @objc public static func createTrip(_ trip: Roam.RoamTrip, handler: Roam.RoamTripCompletionhandlers? = nil)
  @objc public static func updateTrip(_ trip: Roam.RoamTrip, handler: Roam.RoamTripCompletionhandlers? = nil)
  @objc public static func getTrip(_ tripId: Swift.String, handler: Roam.RoamTripCompletionhandlers? = nil)
  @objc public static func getTripSummary(_ tripId: Swift.String, handler: Roam.RoamSummaryTripCompletionhandler? = nil)
  @objc public static func getTripStatus(_ tripId: Swift.String, handler: Roam.RoamTripListenerCompletionhandler? = nil)
  @objc public static func toggleEvents(Geofence: Swift.Bool, Trip: Swift.Bool, Location: Swift.Bool, MovingGeofence: Swift.Bool, handler: Roam.RoamUserCompletionhandler? = nil)
  @objc public static func toggleListener(Events: Swift.Bool, Locations: Swift.Bool, handler: Roam.RoamUserCompletionhandler? = nil)
  @objc public static func getEventsStatus(handler: Roam.RoamUserCompletionhandler? = nil)
  @objc public static func getListenerStatus(handler: Roam.RoamUserCompletionhandler? = nil)
  @objc public static func notificationOpenedHandler(_ resposne: UserNotifications.UNNotificationResponse)
  @objc public static func setLoggerEnabled(logger: Swift.Bool)
  @objc public static func subscribeTrip(_ tripId: Swift.String)
  @objc public static func unsubscribeTrip(_ tripId: Swift.String? = nil)
  @objc public static func subscribe(_ type: Roam.RoamSubscribe, _ userId: Swift.String, handler: Roam.RoamCompletionHandler? = nil)
  @objc public static func unsubscribe(_ type: Roam.RoamSubscribe, _ userId: Swift.String? = nil, handler: Roam.RoamCompletionHandler? = nil)
  @objc public static func setTrackingInAppState(_ state: Roam.RoamTrackingState)
  @objc public static func offlineLocationTracking(_ offlineTracking: Swift.Bool)
  @objc public static func publishSave(_ publish: Roam.RoamPublish? = nil, handler: Roam.RoamStatusErrorHandler? = nil)
  @objc public static func publishOnly(_ publish: Roam.RoamPublish? = nil, handler: Roam.RoamStatusErrorHandler? = nil)
  @objc public static func stopPublishing(handler: Roam.RoamStatusErrorHandler? = nil)
  @objc public static func enableAccuracyEngine(_ accuracy: Swift.Int)
  @objc public static func enableAccuracyEngine()
  @objc public static func disableAccuracyEngine()
  @objc public static func updateLocationWhenStationary(_ value: Swift.Int)
  @objc public static func setBatchReceiverConfig(networkState: Roam.RoamNetworkState, batchCount: Swift.Int, batchWindow: Swift.Int, handler: (_ config: Roam.RoamBatchConfig?, _ error: Roam.RoamError?) -> Swift.Void)
  @objc public static func getBatchReceiverConfig(handler: (_ config: Roam.RoamBatchConfig?, _ error: Roam.RoamError?) -> Swift.Void)
  @objc public static func resetBatchReceiverConfig(handler: Roam.RoamBatchConfigCompletionhandler? = nil)
  @objc public static func setTrackingConfig(accuracy: Swift.Int, timeout: Swift.Int, discardLocation: Swift.Bool, handler: (_ config: Roam.RoamLocationConfig?, _ error: Roam.RoamError?) -> Swift.Void)
  @objc public static func getTrackingConfig(handler: (_ config: Roam.RoamLocationConfig?, _ error: Roam.RoamError?) -> Swift.Void)
  @objc public static func resetTrackingConfig(handler: Roam.RoamTrackingConfigCompletionhandler? = nil)
  @objc public static func requestActivityPermission()
  @objc public static func checkActivityPermission() -> Swift.Bool
  @objc public static func toggleSecurity(networkEnabled: Swift.Bool, deviceRooted: Swift.Bool, bluetoothEnabled: Swift.Bool, externalAccessoryEnabled: Swift.Bool, verifyMotion: Swift.Bool)
  @objc public static func registerConnector(_ connector: any Roam.RoamConnector)
  @objc public static func deRegisterConnector(_ connector: any Roam.RoamConnector)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RoamPublishTrip : ObjectiveC.NSObject {
  @objc public var meta_data: Swift.Dictionary<Swift.String, Any>?
  @objc public var trip_description: Swift.String?
  @objc public var trip_name: Swift.String?
  @objc public var trip_id: Swift.String?
  @objc public var isLocal: Swift.Bool
  @objc public var stops: [Roam.RoamPublishTripStop]?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum CocoaMQTTAUTHReasonCode : Swift.UInt8 {
  case success = 0x00
  case continueAuthentication = 0x18
  case ReAuthenticate = 0x19
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTCONNACKReasonCode : Swift.UInt8 {
  case success = 0x00
  case unspecifiedError = 0x80
  case malformedPacket = 0x81
  case protocolError = 0x82
  case implementationSpecificError = 0x83
  case unsupportedProtocolVersion = 0x84
  case clientIdentifierNotValid = 0x85
  case badUsernameOrPassword = 0x86
  case notAuthorized = 0x87
  case serverUnavailable = 0x88
  case serverBusy = 0x89
  case banned = 0x8A
  case badAuthenticationMethod = 0x8C
  case topicNameInvalid = 0x90
  case packetTooLarge = 0x95
  case quotaExceeded = 0x97
  case payloadFormatInvalid = 0x99
  case retainNotSupported = 0x9A
  case qosNotSupported = 0x9B
  case useAnotherServer = 0x9C
  case serverMoved = 0x9D
  case connectionRateExceeded = 0x9F
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTDISCONNECTReasonCode : Swift.UInt8 {
  case normalDisconnection = 0x00
  case disconnectWithWillMessage = 0x04
  case unspecifiedError = 0x80
  case malformedPacket = 0x81
  case protocolError = 0x82
  case implementationSpecificError = 0x83
  case notAuthorized = 0x87
  case serverBusy = 0x89
  case serverShuttingDown = 0x8B
  case keepAliveTimeout = 0x8D
  case sessionTakenOver = 0x8E
  case topicFilterInvalid = 0x8F
  case topicNameInvalid = 0x90
  case receiveMaximumExceeded = 0x93
  case topicAliasInvalid = 0x94
  case packetTooLarge = 0x95
  case messageRateTooHigh = 0x96
  case quotaExceeded = 0x97
  case administrativeAction = 0x98
  case payloadFormatInvalid = 0x99
  case retainNotSupported = 0x9A
  case qosNotSupported = 0x9B
  case useAnotherServer = 0x9C
  case serverMoved = 0x9D
  case sharedSubscriptionsNotSupported = 0x9E
  case connectionRateExceeded = 0x9F
  case maximumConnectTime = 0xA0
  case subscriptionIdentifiersNotSupported = 0xA1
  case wildcardSubscriptionsNotSupported = 0xA2
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTPUBACKReasonCode : Swift.UInt8 {
  case success = 0x00
  case noMatchingSubscribers = 0x10
  case unspecifiedError = 0x80
  case implementationSpecificError = 0x83
  case notAuthorized = 0x87
  case topicNameInvalid = 0x90
  case packetIdentifierInUse = 0x91
  case quotaExceeded = 0x97
  case payloadFormatInvalid = 0x99
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTPUBCOMPReasonCode : Swift.UInt8 {
  case success = 0x00
  case packetIdentifierNotFound = 0x92
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTPUBRECReasonCode : Swift.UInt8 {
  case success = 0x00
  case noMatchingSubscribers = 0x10
  case unspecifiedError = 0x80
  case implementationSpecificError = 0x83
  case notAuthorized = 0x87
  case topicNameInvalid = 0x90
  case packetIdentifierInUse = 0x91
  case quotaExceeded = 0x97
  case payloadFormatInvalid = 0x99
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTPUBRELReasonCode : Swift.UInt8 {
  case success = 0x00
  case packetIdentifierNotFound = 0x92
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTSUBACKReasonCode : Swift.UInt8 {
  case grantedQoS0 = 0x00
  case grantedQoS1 = 0x01
  case grantedQoS2 = 0x02
  case unspecifiedError = 0x80
  case implementationSpecificError = 0x83
  case notAuthorized = 0x87
  case topicFilterInvalid = 0x8F
  case packetIdentifierInUse = 0x91
  case quotaExceeded = 0x97
  case sharedSubscriptionsNotSupported = 0x9E
  case subscriptionIdentifiersNotSupported = 0xA1
  case wildcardSubscriptionsNotSupported = 0xA2
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaMQTTUNSUBACKReasonCode : Swift.UInt8 {
  case success = 0x00
  case noSubscriptionExisted = 0x11
  case unspecifiedError = 0x80
  case implementationSpecificError = 0x83
  case notAuthorized = 0x87
  case topicFilterInvalid = 0x8F
  case packetIdentifierInUse = 0x91
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CocoaRetainHandlingOption : Swift.UInt8 {
  case sendOnSubscribe = 0
  case sendOnlyWhenSubscribeIsNew = 1
  case none = 2
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum PayloadFormatIndicator : Swift.UInt8 {
  case unspecified = 0x00
  case utf8 = 0x01
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum FileIntegrityCheck {
  case bundleID(Swift.String)
  case mobileProvision(Swift.String)
  case machO(Swift.String, Swift.String)
}
extension Roam.FileIntegrityCheck {
  public var description: Swift.String {
    get
  }
}
public typealias FileIntegrityCheckResult = (result: Swift.Bool, hitChecks: [Roam.FileIntegrityCheck])
public enum IntegrityCheckerImageTarget {
  case `default`
  case custom(Swift.String)
}
@_hasMissingDesignatedInitializers @objc public class RoamTripListener : ObjectiveC.NSObject {
  @objc final public let tripId: Swift.String
  @objc final public let speed: Swift.Double
  @objc final public let distance: Swift.Double
  @objc final public let duration: Swift.Double
  @objc final public let startedTime: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodePubRel : ObjectiveC.NSObject {
  public var reasonCode: Roam.CocoaMQTTPUBRELReasonCode?
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodePubRel(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamTripResponse : ObjectiveC.NSObject {
  @objc public var code: Foundation.NSNumber?
  @objc public var message: Swift.String?
  @objc public var errorDescription: Swift.String?
  @objc public var trip: Roam.RoamTrip?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamTripRoutes : ObjectiveC.NSObject {
  @objc public var activity: Swift.String?
  @objc public var recordedAt: Swift.String?
  @objc public var altitude: Foundation.NSNumber
  @objc public var duration: Foundation.NSNumber
  @objc public var elevationGain: Foundation.NSNumber
  @objc public var distance: Foundation.NSNumber
  @objc public var coordinates: [Swift.Double]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamBatchConfig : ObjectiveC.NSObject {
  @objc public var networkState: Swift.String?
  @objc public var batchCount: Swift.Int
  @objc public var batchWindow: Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RoamTrackingCustomMethodsObjcWrapper : ObjectiveC.NSObject {
  @objc final public let customMethods: Roam.RoamTrackingCustomMethods
  @objc override dynamic public init()
  @objc public func setUpCustomOptions(desiredAccuracy: Roam.LocationAccuracy, useVisit: Swift.Bool, showsBackgroundLocationIndicator: Swift.Bool, distanceFilter: CoreLocation.CLLocationDistance, useSignificant: Swift.Bool, useRegionMonitoring: Swift.Bool, useDynamicGeofencRadius: Swift.Bool, geofenceRadius: Swift.Int, allowBackgroundLocationUpdates: Swift.Bool, activityType: CoreLocation.CLActivityType, pausesLocationUpdatesAutomatically: Swift.Bool, useStandardLocationServices: Swift.Bool, accuracyFilter: Swift.Int, updateInterval: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RoamPublishTripStop : ObjectiveC.NSObject {
  @objc public var stop_metadata: Swift.Dictionary<Swift.String, Any>?
  @objc public var stop_description: Swift.String?
  @objc public var stop_name: Swift.String?
  @objc public var stop_address: Swift.String?
  @objc public var stop_geometryRadius: Foundation.NSNumber?
  @objc public var stop_latitude: Foundation.NSNumber?
  @objc public var stop_longitude: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamStartTrip : ObjectiveC.NSObject {
  @objc public var createdAt: Swift.String?
  @objc public var destinations: [Roam.RoamTripDestination]?
  @objc public var tripId: Swift.String?
  @objc public var isDeleted: Swift.Bool
  @objc public var isEnded: Swift.Bool
  @objc public var isStarted: Swift.Bool
  @objc public var origins: [Roam.RoamTripOrigin]?
  @objc public var tripTrackingUrl: Swift.String?
  @objc public var updatedAt: Swift.String?
  @objc public var userId: Swift.String?
  @objc public var meteData: Swift.Dictionary<Swift.String, Any>?
  @objc public var tripDescription: Swift.String?
  @objc public var isLocal: Swift.Bool
  @objc public var status: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamTripStatus : ObjectiveC.NSObject {
  @objc final public let tripId: Swift.String
  @objc public var tripState: Swift.String
  @objc final public let speed: Swift.Double
  @objc final public let distance: Swift.Double
  @objc final public let duration: Swift.Double
  @objc final public let startedTime: Swift.String
  @objc final public let recordedAt: Swift.String
  @objc final public let pace: Swift.Double
  @objc final public let latitude: Swift.Double
  @objc final public let longitude: Swift.Double
  @objc final public let altitude: Swift.Double
  @objc final public let elevationGain: Swift.Double
  @objc final public let totalElevationGain: Swift.Double
  @objc deinit
}
public typealias FailedCheckType = (check: Roam.FailedCheck, failMessage: Swift.String)
public enum FailedCheck : Swift.CaseIterable {
  case urlSchemes
  case existenceOfSuspiciousFiles
  case suspiciousFilesCanBeOpened
  case restrictedDirectoriesWriteable
  case fork
  case symbolicLinks
  case dyld
  case openedPorts
  case pSelectFlag
  case suspiciousObjCClasses
  public static func == (a: Roam.FailedCheck, b: Roam.FailedCheck) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Roam.FailedCheck]
  public static var allCases: [Roam.FailedCheck] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class RoamTripStop : ObjectiveC.NSObject {
  @objc public var stopId: Swift.String?
  @objc public var stopName: Swift.String?
  @objc public var stopDescription: Swift.String?
  @objc public var address: Swift.String?
  @objc public var updatedAt: Swift.String?
  @objc public var createdAt: Swift.String?
  @objc public var arrivedAt: Swift.String?
  @objc public var departedAt: Swift.String?
  @objc public var geometryType: Swift.String?
  @objc public var metadata: Swift.Dictionary<Swift.String, Any>?
  @objc public var geometryRadius: Foundation.NSNumber
  @objc public var geometryCoordinates: [Swift.Double]?
  @objc override dynamic public init()
  @objc deinit
}
public enum CocoaMQTTPropertyName : Swift.UInt8 {
  case payloadFormatIndicator
  case willExpiryInterval
  case contentType
  case responseTopic
  case correlationData
  case subscriptionIdentifier
  case sessionExpiryInterval
  case assignedClientIdentifier
  case serverKeepAlive
  case authenticationMethod
  case authenticationData
  case requestProblemInformation
  case willDelayInterval
  case requestResponseInformation
  case responseInformation
  case serverReference
  case reasonString
  case receiveMaximum
  case topicAliasMaximum
  case topicAlias
  case maximumQoS
  case retainAvailable
  case userProperty
  case maximumPacketSize
  case wildcardSubscriptionAvailable
  case subscriptionIdentifiersAvailable
  case sharedSubscriptionAvailable
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum formatInt : Swift.Int {
  case formatUint8
  case formatUint16
  case formatUint32
  case formatSint8
  case formatSint16
  case formatSint32
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class RoamTripError : ObjectiveC.NSObject {
  @objc public var code: Foundation.NSNumber
  @objc public var message: Swift.String?
  @objc public var errorDescription: Swift.String?
  @objc public var errors: [Roam.RoamTripErrors]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class RoamTripErrors : ObjectiveC.NSObject {
  @objc public var field: Swift.String?
  @objc public var message: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPad5, iPad6, iPad7, iPad8, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, iPhone13Pro, iPhone13ProMax, iPhone13Mini, iPhone13, iPhoneSE3, iPhone14, iPhone14Plus, iPhone14Pro, iPhone14ProMax, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var type: Roam.Model {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class RoamLocationReceived : ObjectiveC.NSObject {
  @objc public var activity: Swift.String!
  @objc public var altitude: Foundation.NSNumber!
  @objc public var latitude: Foundation.NSNumber
  @objc public var longitude: Foundation.NSNumber
  @objc public var course: Foundation.NSNumber!
  @objc public var eventSource: Swift.String!
  @objc public var eventType: Swift.String!
  @objc public var eventVersion: Swift.String!
  @objc public var horizontalAccuracy: Foundation.NSNumber!
  @objc public var locationId: Swift.String!
  @objc public var recordedAt: Swift.String!
  @objc public var speed: Foundation.NSNumber!
  @objc public var userId: Swift.String!
  @objc public var verticalAccuracy: Foundation.NSNumber!
  @objc public var metaData: Swift.Dictionary<Swift.String, Any>?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamEvents : ObjectiveC.NSObject {
  @objc public var activity: Swift.String?
  @objc public var eventDescription: Swift.String?
  @objc public var altitude: Foundation.NSNumber
  @objc public var course: Foundation.NSNumber
  @objc public var createdAt: Swift.String?
  @objc public var distance: Foundation.NSNumber
  @objc public var eventSource: Swift.String?
  @objc public var eventType: Swift.String?
  @objc public var eventVersion: Swift.String?
  @objc public var geofenceId: Swift.String?
  @objc public var horizontalAccuracy: Foundation.NSNumber
  @objc public var coordinates: [Swift.Double]?
  @objc public var locationId: Swift.String?
  @objc public var nearbyUserId: Swift.String?
  @objc public var recordedAt: Swift.String?
  @objc public var speed: Foundation.NSNumber
  @objc public var tripId: Swift.String?
  @objc public var userId: Swift.String?
  @objc public var veritcalAccuracy: Foundation.NSNumber
  @objc public var location_metadata: Swift.Dictionary<Swift.String, Any>?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamTripOrigin : ObjectiveC.NSObject {
  @objc public var coordinates: [Swift.Double]!
  @objc public var createdAt: Swift.String!
  @objc public var id: Swift.String!
  @objc public var locType: Swift.String!
  @objc public var reached: Swift.Bool
  @objc public var tripId: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamTripEvents : ObjectiveC.NSObject {
  @objc public var eventsId: Swift.String?
  @objc public var tripId: Swift.String?
  @objc public var userId: Swift.String?
  @objc public var eventType: Swift.String?
  @objc public var createAt: Swift.String?
  @objc public var eventSource: Swift.String?
  @objc public var eventVersion: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamTripSummary : ObjectiveC.NSObject {
  @objc public var tripId: Swift.String?
  @objc public var tripState: Swift.String?
  @objc public var tripName: Swift.String?
  @objc public var tripDescription: Swift.String?
  @objc public var startedAt: Swift.String?
  @objc public var endedAt: Swift.String?
  @objc public var createAt: Swift.String?
  @objc public var updateAt: Swift.String?
  @objc public var total_Distance: Foundation.NSNumber
  @objc public var total_Duration: Foundation.NSNumber
  @objc public var total_Elevation_gain: Foundation.NSNumber
  @objc public var metadata: Swift.Dictionary<Swift.String, Any>?
  @objc public var startedLocation: Swift.Dictionary<Swift.String, Any>?
  @objc public var endLocation: Swift.Dictionary<Swift.String, Any>?
  @objc public var routes: [Roam.RoamTripSummaryRoute]
  @objc public var route_index: [Swift.Double]
  @objc public var events: [Roam.RoamTripEvents]
  @objc public var user: Roam.RoamTripUser?
  @objc deinit
}
@objc public protocol RoamDelegate {
  @objc func didUpdateLocation(_ locations: [Roam.RoamLocation])
  @objc optional func didReceiveEvents(_ events: Roam.RoamEvents)
  @objc optional func didReceiveUserLocation(_ location: Roam.RoamLocationReceived)
  @objc optional func onReceiveTrip(_ tripStatus: [Roam.RoamTripStatus])
  @objc optional func onError(_ error: Roam.RoamError)
  @objc optional func didChangeMQTTStatus(_ status: Swift.String)
}
@_inheritsConvenienceInitializers @objc public class RoamPublish : ObjectiveC.NSObject {
  @objc public var meta_data: Swift.Dictionary<Swift.String, Any>?
  @objc public var user_id: Swift.Bool
  @objc public var app_id: Swift.Bool
  @objc public var recorded_at: Swift.Bool
  @objc public var tz_offset: Swift.Bool
  @objc public var geofence_events: Swift.Bool
  @objc public var trips_events: Swift.Bool
  @objc public var location_events: Swift.Bool
  @objc public var nearby_events: Swift.Bool
  @objc public var location_listener: Swift.Bool
  @objc public var event_listener: Swift.Bool
  @objc public var app_context: Swift.Bool
  @objc public var network_status: Swift.Bool
  @objc public var gps_status: Swift.Bool
  @objc public var location_permission: Swift.Bool
  @objc public var battery_status: Swift.Bool
  @objc public var airplane_mode: Swift.Bool
  @objc public var battery_saver: Swift.Bool
  @objc public var battery_remaining: Swift.Bool
  @objc public var device_model: Swift.Bool
  @objc public var device_manufacturer: Swift.Bool
  @objc public var os_version: Swift.Bool
  @objc public var tracking_mode: Swift.Bool
  @objc public var altitude: Swift.Bool
  @objc public var speed: Swift.Bool
  @objc public var vertical_accuracy: Swift.Bool
  @objc public var horizontal_accuracy: Swift.Bool
  @objc public var course: Swift.Bool
  @objc public var activity: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamActiveTripResponse : ObjectiveC.NSObject {
  @objc public var code: Foundation.NSNumber
  @objc public var message: Swift.String?
  @objc public var errorDescription: Swift.String?
  @objc public var has_more: Swift.Bool
  @objc public var error: Roam.RoamTripError?
  @objc public var trips: [Roam.RoamTrip]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamMqttConnector : ObjectiveC.NSObject, Roam.RoamConnector {
  @objc public var clientID: Swift.String
  @objc public class Builder : ObjectiveC.NSObject {
    public init(host: Swift.String, port: Swift.UInt16, connectionType: Roam.RoamMqttConnectionType, topic: Swift.String)
    public func setPath(_ path: Swift.String) -> Roam.RoamMqttConnector.Builder
    public func setCredentials(username: Swift.String, password: Swift.String) -> Roam.RoamMqttConnector.Builder
    public func setClientId(_ clientId: Swift.String) -> Roam.RoamMqttConnector.Builder
    public func setQos(_ qos: Swift.Int) -> Roam.RoamMqttConnector.Builder
    public func setConnectOptions(_ connectOptions: Roam.RoamMqttConnectOptions) -> Roam.RoamMqttConnector.Builder
    public func setWillOption(_ willOption: Roam.RoamMqttWillOptions) -> Roam.RoamMqttConnector.Builder
    public func setMQTTVersion(_ version: Swift.String) -> Roam.RoamMqttConnector.Builder
    public func build() -> Roam.RoamMqttConnector
    @objc deinit
  }
  @objc deinit
}
@objc public enum RoamTrackingState : Swift.Int {
  case AlwaysOn = 0
  case Foreground
  case Background
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum RoamSubscribe : Swift.Int {
  case Both
  case Location
  case Events
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum RoamNetworkState : Swift.Int {
  case Online = 0
  case Offline
  case Both
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum RoamTrackingMode : Swift.Int, Swift.RawRepresentable {
  case passive = 1
  case balanced
  case active
  case custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class RoamTripDelete : ObjectiveC.NSObject {
  @objc public var code: Foundation.NSNumber?
  @objc public var message: Swift.String?
  @objc public var messageDescription: Swift.String?
  @objc public var tripId: Swift.String?
  @objc public var isDeleted: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public enum CocoaMQTTLoggerLevel : Swift.Int {
  case debug, info, warning, error, off
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class CocoaMQTTLogger : ObjectiveC.NSObject {
  public static var logger: Roam.CocoaMQTTLogger
  @objc override dynamic public init()
  open func log(level: Roam.CocoaMQTTLoggerLevel, message: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamLocation : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String?
  @objc final public let activity: Swift.String?
  @objc final public let location: CoreLocation.CLLocation
  @objc final public let timezoneOffset: Swift.String?
  @objc final public let recordedAt: Swift.String?
  @objc public var batteryRemaining: Swift.Int
  @objc public var networkStatus: Swift.Bool
  @objc final public let metaData: Swift.Dictionary<Swift.String, Any>?
  @objc public var batch: Roam.RoamBatchConfig?
  @objc public var speed: Swift.Int
  @objc deinit
}
public typealias RoamUserCompletionhandler = ((_ user: Roam.RoamUser?, _ error: Roam.RoamError?) -> Swift.Void)
public typealias RoamLogoutCompletionhandler = ((_ status: Swift.String?, _ error: Roam.RoamError?) -> Swift.Void)
public typealias RoamCurrentLocationCompletionhandler = ((_ location: CoreLocation.CLLocation?, _ error: Roam.RoamError?) -> Swift.Void)
public typealias RoamTripCompletionhandler = ((_ status: Swift.String?, _ error: Roam.RoamError?) -> Swift.Void)
public typealias RoamActiveTripsCompletionhandler = ((_ trip: Roam.RoamActiveTripResponse?, _ error: Roam.RoamTripError?) -> Swift.Void)
public typealias RoamGetTripCompletionhandler = ((_ trip: Roam.RoamGetTrip?, _ error: Roam.RoamError?) -> Swift.Void)
public typealias RoamSummaryTripCompletionhandler = ((_ trip: Roam.RoamTripResponse?, _ error: Roam.RoamTripError?) -> Swift.Void)
public typealias RoamTripListenerCompletionhandler = ((_ trip: Roam.RoamTripListener?, _ error: Roam.RoamError?) -> Swift.Void)
public typealias RoamTripSyncStatusCompletionhandler = ((_ status: Swift.Bool, _ error: Roam.RoamError?) -> Swift.Void)
public typealias RoamPublishCompletionhandler = ((_ mqttStatus: Swift.Bool) -> Swift.Void)
public typealias RoamStartTripCompletionhandler = ((_ trip: Roam.RoamStartTrip?, _ error: Roam.RoamError?) -> Swift.Void)
public typealias RoamDeleteTripCompletionhandler = ((_ trip: Roam.RoamTripDelete?, _ error: Roam.RoamTripError?) -> Swift.Void)
public typealias RoamSyncTripCompletionhandler = ((_ trip: Roam.RoamTripSync?, _ error: Roam.RoamTripError?) -> Swift.Void)
public typealias RoamTripCompletionhandlers = ((_ trip: Roam.RoamTripResponse?, _ error: Roam.RoamTripError?) -> Swift.Void)
public typealias RoamBatchConfigCompletionhandler = ((_ config: Roam.RoamBatchConfig?, _ error: Roam.RoamError?) -> Swift.Void)
public typealias RoamTrackingConfigCompletionhandler = ((_ config: Roam.RoamLocationConfig?, _ error: Roam.RoamError?) -> Swift.Void)
public typealias RoamCompletionHandler = ((_ status: Swift.String?, _ userId: Swift.String?, _ error: Roam.RoamError?) -> Swift.Void)
public typealias RoamStatusErrorHandler = ((_ status: Swift.String?, _ error: Roam.RoamError?) -> Swift.Void)
@_hasMissingDesignatedInitializers @objc public class RoamLocationConfig : ObjectiveC.NSObject {
  @objc public var accuracy: Swift.Int
  @objc public var timeout: Swift.Int
  @objc public var discardLocation: Swift.Bool
  @objc deinit
}
@objc public class MqttPublishProperties : ObjectiveC.NSObject {
  public var propertyLength: Swift.Int?
  public var payloadFormatIndicator: Roam.PayloadFormatIndicator?
  public var messageExpiryInterval: Swift.UInt32?
  public var topicAlias: Swift.UInt16?
  public var responseTopic: Swift.String?
  public var correlationData: [Swift.UInt8]?
  public var userProperty: [Swift.String : Swift.String]?
  public var subscriptionIdentifier: Swift.UInt32?
  public var contentType: Swift.String?
  public init(propertyLength: Swift.Int? = nil, payloadFormatIndicator: Roam.PayloadFormatIndicator? = nil, messageExpiryInterval: Swift.UInt32? = nil, topicAlias: Swift.UInt16? = nil, responseTopic: Swift.String? = nil, correlation: Swift.String? = nil, userProperty: [Swift.String : Swift.String]? = nil, subscriptionIdentifier: Swift.UInt32? = nil, contentType: Swift.String? = nil)
  public var properties: [Swift.UInt8] {
    get
  }
  @objc deinit
}
public enum CocoaMQTTError : Swift.Error {
  case invalidURL
  case readTimeout
  case writeTimeout
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public enum FoundationConnection : Swift.Error {
    case closed(Foundation.URLSessionWebSocketTask.CloseCode)
  }
  public static func == (a: Roam.CocoaMQTTError, b: Roam.CocoaMQTTError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MqttDecodeSubAck : ObjectiveC.NSObject {
  public var reasonCodes: [Roam.CocoaMQTTSUBACKReasonCode]
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodeSubAck(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamCreateTrip : ObjectiveC.NSObject {
  @objc public var createdAt: Swift.String!
  @objc public var destinations: [Roam.RoamTripDestination]!
  @objc public var tripId: Swift.String!
  @objc public var isDeleted: Swift.Bool
  @objc public var isEnded: Swift.Bool
  @objc public var isStarted: Swift.Bool
  @objc public var origins: [Roam.RoamTripOrigin]!
  @objc public var tripTrackingUrl: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc public var userId: Swift.String!
  @objc public var metaData: Swift.Dictionary<Swift.String, Any>!
  @objc deinit
}
public class ThreadSafeDictionary<K, V> : Swift.Collection where K : Swift.Hashable {
  public var startIndex: Swift.Dictionary<K, V>.Index {
    get
  }
  public var endIndex: Swift.Dictionary<K, V>.Index {
    get
  }
  public init(label: Swift.String, dict: [K : V] = [K:V]())
  public func index(after i: Swift.Dictionary<K, V>.Index) -> Swift.Dictionary<K, V>.Index
  public subscript(key: K) -> V? {
    get
    set(newValue)
  }
  public subscript(index: Swift.Dictionary<K, V>.Index) -> Swift.Dictionary<K, V>.Element {
    get
  }
  @discardableResult
  public func removeValue(forKey key: K) -> V?
  public func removeAll()
  public typealias Element = Swift.Dictionary<K, V>.Element
  public typealias Index = Swift.Dictionary<K, V>.Index
  public typealias Indices = Swift.DefaultIndices<Roam.ThreadSafeDictionary<K, V>>
  public typealias Iterator = Swift.IndexingIterator<Roam.ThreadSafeDictionary<K, V>>
  public typealias SubSequence = Swift.Slice<Roam.ThreadSafeDictionary<K, V>>
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamGetTrip : ObjectiveC.NSObject {
  @objc public var createdAt: Swift.String!
  @objc public var destinations: [Roam.RoamTripDestination]!
  @objc public var distanceCovered: Foundation.NSNumber
  @objc public var duration: Foundation.NSNumber
  @objc public var events: [Roam.RoamTripEvent]!
  @objc public var tripId: Swift.String!
  @objc public var isDeleted: Swift.Bool
  @objc public var isEnded: Swift.Bool
  @objc public var isPaused: Swift.Bool
  @objc public var isStarted: Swift.Bool
  @objc public var origins: [Roam.RoamTripOrigin]!
  @objc public var projectId: Swift.String!
  @objc public var tripEndedAt: Swift.String!
  @objc public var tripStartedAt: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc public var userId: Swift.String!
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttAuthProperties : ObjectiveC.NSObject {
  public var authenticationMethod: Swift.String?
  public var authenticationData: [Swift.UInt8]?
  public var reasonString: Swift.String?
  public var userProperties: [Swift.String : Swift.String]?
  public var properties: [Swift.UInt8] {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttConnectProperties : ObjectiveC.NSObject {
  public var sessionExpiryInterval: Swift.UInt32?
  public var receiveMaximum: Swift.UInt16?
  public var maximumPacketSize: Swift.UInt32?
  public var topicAliasMaximum: Swift.UInt16?
  public var requestResponseInformation: Swift.UInt8?
  public var requestProblemInfomation: Swift.UInt8?
  public var userProperties: [Swift.String : Swift.String]?
  public var authenticationMethod: Swift.String?
  public var authenticationData: [Swift.UInt8]?
  public var properties: [Swift.UInt8] {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
public class IOSSecuritySuite {
  public static func amIJailbroken() -> Swift.Bool
  public static func amIJailbrokenWithFailMessage() -> (jailbroken: Swift.Bool, failMessage: Swift.String)
  public static func amIJailbrokenWithFailedChecks() -> (jailbroken: Swift.Bool, failedChecks: [Roam.FailedCheckType])
  public static func amIRunInEmulator() -> Swift.Bool
  public static func amIDebugged() -> Swift.Bool
  public static func denyDebugger()
  public static func isParentPidUnexpected() -> Swift.Bool
  public static func amITampered(_ checks: [Roam.FileIntegrityCheck]) -> Roam.FileIntegrityCheckResult
  public static func amIReverseEngineered() -> Swift.Bool
  public static func amIReverseEngineeredWithFailedChecks() -> (reverseEngineered: Swift.Bool, failedChecks: [Roam.FailedCheckType])
  public static func amIRuntimeHooked(dyldWhiteList: [Swift.String], detectionClass: Swift.AnyClass, selector: ObjectiveC.Selector, isClassMethod: Swift.Bool) -> Swift.Bool
  public static func amIProxied() -> Swift.Bool
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension Roam.IOSSecuritySuite {
  public static func amIMSHooked(_ functionAddress: Swift.UnsafeMutableRawPointer) -> Swift.Bool
  public static func denyMSHook(_ functionAddress: Swift.UnsafeMutableRawPointer) -> Swift.UnsafeMutableRawPointer?
  public static func denySymbolHook(_ symbol: Swift.String)
  public static func denySymbolHook(_ symbol: Swift.String, at image: Swift.UnsafePointer<MachO.mach_header>, imageSlide slide: Swift.Int)
  public static func getMachOFileHashValue(_ target: Roam.IntegrityCheckerImageTarget = .default) -> Swift.String?
  public static func findLoadedDylibs(_ target: Roam.IntegrityCheckerImageTarget = .default) -> [Swift.String]?
  public static func hasBreakpointAt(_ functionAddr: Swift.UnsafeRawPointer, functionSize: Darwin.vm_size_t?) -> Swift.Bool
  public static func hasWatchpoint() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class MqttDecodePublish : ObjectiveC.NSObject {
  public var propertyLength: Swift.Int?
  public var payloadFormatIndicator: Roam.PayloadFormatIndicator?
  public var messageExpiryInterval: Swift.UInt32?
  public var topicAlias: Swift.UInt16?
  public var responseTopic: Swift.String?
  public var correlationData: [Swift.UInt8]?
  public var userProperty: [Swift.String : Swift.String]?
  public var subscriptionIdentifier: Swift.Int
  public var contentType: Swift.String?
  public var topic: Swift.String
  public var packetIdentifier: Swift.UInt16?
  public var mqtt5DataIndex: Swift.Int
  public func decodePublish(fixedHeader: Swift.UInt8, publishData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamTripDestination : ObjectiveC.NSObject {
  @objc public var coordinates: [Swift.Double]!
  @objc public var createdAt: Swift.String!
  @objc public var id: Swift.String!
  @objc public var locType: Swift.String!
  @objc public var reached: Swift.Bool
  @objc public var tripId: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc deinit
}
@objc public class CocoaMQTT5Message : ObjectiveC.NSObject {
  public var qos: Roam.CocoaMQTTQoS
  public var topic: Swift.String
  public var payload: [Swift.UInt8]
  public var retained: Swift.Bool
  public var duplicated: Swift.Bool
  public var isUTF8EncodedData: Swift.Bool
  public var willDelayInterval: Swift.UInt32?
  public var willExpiryInterval: Swift.UInt32?
  public var contentType: Swift.String?
  public var willResponseTopic: Swift.String?
  public var willCorrelationData: [Swift.UInt8]?
  public var willUserProperty: [Swift.String : Swift.String]?
  public var string: Swift.String? {
    get
  }
  public var properties: [Swift.UInt8] {
    get
  }
  public init(topic: Swift.String, string: Swift.String, qos: Roam.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false)
  public init(topic: Swift.String, payload: [Swift.UInt8], qos: Roam.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false)
  public init(topic: Swift.String, payload: [Swift.String : Any], qos: Roam.CocoaMQTTQoS = .qos1, retained: Swift.Bool = false) throws
  @objc deinit
}
extension Roam.CocoaMQTT5Message {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class RoamTrip : ObjectiveC.NSObject {
  @objc public var tripId: Swift.String?
  @objc public var tripDescription: Swift.String?
  @objc public var tripState: Swift.String?
  @objc public var tripName: Swift.String?
  @objc public var totalDistance: Foundation.NSNumber
  @objc public var totalDuration: Foundation.NSNumber
  @objc public var totalElevationGain: Foundation.NSNumber
  @objc public var updatedAt: Swift.String?
  @objc public var createdAt: Swift.String?
  @objc public var startedAt: Swift.String?
  @objc public var endedAt: Swift.String?
  @objc public var metadata: Swift.Dictionary<Swift.String, Any>?
  @objc public var isLocal: Swift.Bool
  @objc public var syncStatus: Swift.String?
  @objc public var events: [Roam.RoamTripEvents]
  @objc public var stops: [Roam.RoamTripStop]
  @objc public var routes: [Roam.RoamTripRoutes]
  @objc public var user: Roam.RoamTripUser?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class RoamTripUser : ObjectiveC.NSObject {
  @objc public var userId: Swift.String?
  @objc public var userName: Swift.String?
  @objc public var userDescription: Swift.String?
  @objc public var metadata: Swift.Dictionary<Swift.String, Any>?
  @objc override dynamic public init()
  @objc deinit
}
public class MqttSubscription {
  public var topic: Swift.String
  public var qos: Roam.CocoaMQTTQoS
  public var noLocal: Swift.Bool
  public var retainAsPublished: Swift.Bool
  public var retainHandling: Roam.CocoaRetainHandlingOption
  public var subscriptionOptions: Swift.Bool
  public init(topic: Swift.String)
  public init(topic: Swift.String, qos: Roam.CocoaMQTTQoS)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamTripEvent : ObjectiveC.NSObject {
  @objc public var createdAt: Swift.String!
  @objc public var eventType: Swift.String!
  @objc public var id: Swift.String!
  @objc public var isDeleted: Swift.Bool
  @objc public var tripId: Swift.String!
  @objc public var userId: Swift.String!
  @objc public var userLocationId: Swift.String!
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MqttDecodeUnsubAck : ObjectiveC.NSObject {
  public var reasonCodes: [Roam.CocoaMQTTUNSUBACKReasonCode]
  public var msgid: Swift.UInt16
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public func decodeUnSubAck(fixedHeader: Swift.UInt8, pubAckData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RoamError : ObjectiveC.NSObject {
  @objc final public let code: Swift.String?
  @objc final public let message: Swift.String?
  @objc deinit
}
public protocol CocoaMQTTWebSocketConnectionDelegate : AnyObject {
  func connection(_ conn: any Roam.CocoaMQTTWebSocketConnection, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  func urlSessionConnection(_ conn: any Roam.CocoaMQTTWebSocketConnection, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  func connectionOpened(_ conn: any Roam.CocoaMQTTWebSocketConnection)
  func connectionClosed(_ conn: any Roam.CocoaMQTTWebSocketConnection, withError error: (any Swift.Error)?, withCode code: Swift.UInt16?)
  func connection(_ conn: any Roam.CocoaMQTTWebSocketConnection, receivedString string: Swift.String)
  func connection(_ conn: any Roam.CocoaMQTTWebSocketConnection, receivedData data: Foundation.Data)
}
public protocol CocoaMQTTWebSocketConnection : ObjectiveC.NSObjectProtocol {
  var delegate: (any Roam.CocoaMQTTWebSocketConnectionDelegate)? { get set }
  var queue: Dispatch.DispatchQueue { get set }
  func connect()
  func disconnect()
  func write(data: Foundation.Data, handler: @escaping ((any Swift.Error)?) -> Swift.Void)
}
public protocol CocoaMQTTWebSocketConnectionBuilder {
  func buildConnection(forURL url: Foundation.URL, withHeaders headers: [Swift.String : Swift.String]) throws -> any Roam.CocoaMQTTWebSocketConnection
}
public class CocoaMQTTWebSocket : Roam.CocoaMQTTSocketProtocol {
  public var enableSSL: Swift.Bool
  public var shouldConnectWithURIOnly: Swift.Bool
  public var headers: [Swift.String : Swift.String]
  public typealias ConnectionBuilder = Roam.CocoaMQTTWebSocketConnectionBuilder
  public struct DefaultConnectionBuilder : Roam.CocoaMQTTWebSocket.ConnectionBuilder {
    public init()
    public func buildConnection(forURL url: Foundation.URL, withHeaders headers: [Swift.String : Swift.String]) throws -> any Roam.CocoaMQTTWebSocketConnection
  }
  public func setDelegate(_ theDelegate: (any Roam.CocoaMQTTSocketDelegate)?, delegateQueue: Dispatch.DispatchQueue?)
  public init(uri: Swift.String = "", builder: any Roam.CocoaMQTTWebSocketConnectionBuilder = CocoaMQTTWebSocket.DefaultConnectionBuilder())
  public func connect(toHost host: Swift.String, onPort port: Swift.UInt16) throws
  public func connect(toHost host: Swift.String, onPort port: Swift.UInt16, withTimeout timeout: Foundation.TimeInterval) throws
  public func disconnect()
  public func readData(toLength length: Swift.UInt, withTimeout timeout: Foundation.TimeInterval, tag: Swift.Int)
  public func write(_ data: Foundation.Data, withTimeout timeout: Foundation.TimeInterval, tag: Swift.Int)
  @objc deinit
}
extension Roam.CocoaMQTTWebSocket : Roam.CocoaMQTTWebSocketConnectionDelegate {
  public func urlSessionConnection(_ conn: any Roam.CocoaMQTTWebSocketConnection, didReceiveTrust trust: Security.SecTrust, didReceiveChallenge challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  public func connection(_ conn: any Roam.CocoaMQTTWebSocketConnection, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func connectionOpened(_ conn: any Roam.CocoaMQTTWebSocketConnection)
  public func connectionClosed(_ conn: any Roam.CocoaMQTTWebSocketConnection, withError error: (any Swift.Error)?, withCode code: Swift.UInt16?)
  public func connection(_ conn: any Roam.CocoaMQTTWebSocketConnection, receivedString string: Swift.String)
  public func connection(_ conn: any Roam.CocoaMQTTWebSocketConnection, receivedData data: Foundation.Data)
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension Roam.CocoaMQTTWebSocket {
  @objc public class FoundationConnection : ObjectiveC.NSObject, Roam.CocoaMQTTWebSocketConnection {
    weak public var delegate: (any Roam.CocoaMQTTWebSocketConnectionDelegate)?
    public var queue: Dispatch.DispatchQueue {
      get
      set
    }
    public init(url: Foundation.URL, config: Foundation.URLSessionConfiguration)
    public func connect()
    public func disconnect()
    public func write(data: Foundation.Data, handler: @escaping ((any Swift.Error)?) -> Swift.Void)
    @objc deinit
  }
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension Roam.CocoaMQTTWebSocket.FoundationConnection : Foundation.URLSessionWebSocketDelegate {
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
}
extension Roam.CocoaMQTTWebSocket {
  @objc public class StarscreamConnection : ObjectiveC.NSObject, Roam.CocoaMQTTWebSocketConnection {
    public var reference: Starscream.WebSocket
    weak public var delegate: (any Roam.CocoaMQTTWebSocketConnectionDelegate)?
    public var queue: Dispatch.DispatchQueue {
      get
      set
    }
    public init(request: Foundation.URLRequest)
    public func connect()
    public func disconnect()
    public func write(data: Foundation.Data, handler: @escaping ((any Swift.Error)?) -> Swift.Void)
    @objc deinit
  }
}
extension Roam.CocoaMQTTWebSocket.StarscreamConnection : Starscream.CertificatePinning {
  public func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((Starscream.PinningState) -> ()))
}
extension Roam.CocoaMQTTWebSocket.StarscreamConnection : Starscream.WebSocketDelegate {
  public func didReceive(event: Starscream.WebSocketEvent, client: any Starscream.WebSocketClient)
}
@objc @_inheritsConvenienceInitializers public class MqttDecodeConnAck : ObjectiveC.NSObject {
  public var propertyLength: Swift.Int?
  public var sessionExpiryInterval: Swift.UInt32?
  public var receiveMaximum: Swift.UInt16?
  public var maximumQoS: Roam.CocoaMQTTQoS?
  public var retainAvailable: Swift.Bool?
  public var maximumPacketSize: Swift.UInt32?
  public var assignedClientIdentifier: Swift.String?
  public var topicAliasMaximum: Swift.UInt16?
  public var reasonString: Swift.String?
  public var userProperty: [Swift.String : Swift.String]?
  public var wildcardSubscriptionAvailable: Swift.Bool?
  public var subscriptionIdentifiersAvailable: Swift.Bool?
  public var sharedSubscriptionAvailable: Swift.Bool?
  public var serverKeepAlive: Swift.UInt16?
  public var responseInformation: Swift.String?
  public var serverReference: Swift.String?
  public var authenticationMethod: Swift.String?
  public var authenticationData: [Swift.UInt8]
  public func properties(connackData: [Swift.UInt8])
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class RoamTripSync : ObjectiveC.NSObject {
  @objc public var code: Foundation.NSNumber?
  @objc public var message: Swift.String?
  @objc public var messageDescription: Swift.String?
  @objc public var trip_id: Swift.String?
  @objc public var isSynced: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BatchLocation) public class BatchLocation : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Roam.BatchLocation {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Roam.BatchLocation>
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var batteryRemaining: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var distance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var horizontalAccuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var networkStatus: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pace: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recordedAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timezoneOffset: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updateAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var verticalAccuracy: Swift.Double {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(CustomMqttLocationData) public class CustomMqttLocationData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Roam.CustomMqttLocationData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Roam.CustomMqttLocationData>
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_remaining: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var client_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gps_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var horizontal_accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isOfflineData: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_permission: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mqttLocation_time: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var network_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tracking_mode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vertical_accuracy: Swift.Double {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(MqttLocationData) public class MqttLocationData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Roam.MqttLocationData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Roam.MqttLocationData>
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_context: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_details: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_remaining: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_saver: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_manufacturer: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_model: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_listener: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var geofence_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gps_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var horizontal_accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_authorization_status: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_listener: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_permission: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mqtt_id: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mqttLocation_time: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nearby_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var network_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var os_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var source: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tracking_mode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trips_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tz_offset: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vertical_accuracy: Swift.Double {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(MyTrip) public class MyTrip : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Roam.MyTrip {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Roam.MyTrip>
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var distance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var elevation_gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_count: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isLocal: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isQuickTrip: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_count: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var locationId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pace: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var start_time: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tripId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var update_time: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var route: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension Roam.MyTrip {
  @objc(addRouteObject:) @NSManaged dynamic public func addToRoute(_ value: Roam.MyTripRoute)
  @objc(removeRouteObject:) @NSManaged dynamic public func removeFromRoute(_ value: Roam.MyTripRoute)
  @objc(addRoute:) @NSManaged dynamic public func addToRoute(_ values: Foundation.NSSet)
  @objc(removeRoute:) @NSManaged dynamic public func removeFromRoute(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(MyTripRoute) public class MyTripRoute : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Roam.MyTripRoute {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Roam.MyTripRoute>
  @objc @NSManaged dynamic public var accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var distance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var elevation_gain: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tripId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip: Roam.MyTrip? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(TripEventsLocal) public class TripEventsLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Roam.TripEventsLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Roam.TripEventsLocal>
  @objc @NSManaged dynamic public var created_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_source: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip: Roam.TripsLocal? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(TripsLocal) public class TripsLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Roam.TripsLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Roam.TripsLocal>
  @objc @NSManaged dynamic public var created_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var distance_covered: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var is_deleted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var is_ended: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var is_online: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var is_paused: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var is_started: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metadata: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sync_status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var synced: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_description: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_ended_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_started_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_state: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updated_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var events: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stop: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension Roam.TripsLocal {
  @objc(addEventsObject:) @NSManaged dynamic public func addToEvents(_ value: Roam.TripEventsLocal)
  @objc(removeEventsObject:) @NSManaged dynamic public func removeFromEvents(_ value: Roam.TripEventsLocal)
  @objc(addEvents:) @NSManaged dynamic public func addToEvents(_ values: Foundation.NSSet)
  @objc(removeEvents:) @NSManaged dynamic public func removeFromEvents(_ values: Foundation.NSSet)
}
extension Roam.TripsLocal {
  @objc(addStopObject:) @NSManaged dynamic public func addToStop(_ value: Roam.TripStop)
  @objc(removeStopObject:) @NSManaged dynamic public func removeFromStop(_ value: Roam.TripStop)
  @objc(addStop:) @NSManaged dynamic public func addToStop(_ values: Foundation.NSSet)
  @objc(removeStop:) @NSManaged dynamic public func removeFromStop(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(TripStop) public class TripStop : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Roam.TripStop {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Roam.TripStop>
  @objc @NSManaged dynamic public var address: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var arrivedAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var departedAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var geometryRadius: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var geometryType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metadata: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stopAddress: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stopDescription: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stopId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stopName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip: Roam.TripsLocal? {
    @objc get
    @objc set
  }
}
extension Roam.RoamMqttConnectionType : Swift.Equatable {}
extension Roam.RoamMqttConnectionType : Swift.Hashable {}
extension Roam.RoamMqttConnectionType : Swift.RawRepresentable {}
extension Roam.CocoaMQTTQoS : Swift.Hashable {}
extension Roam.CocoaMQTTQoS : Swift.RawRepresentable {}
extension Roam.CocoaMQTTConnState : Swift.Equatable {}
extension Roam.CocoaMQTTConnState : Swift.Hashable {}
extension Roam.CocoaMQTTConnState : Swift.RawRepresentable {}
extension Roam.LocationAccuracy : Swift.Equatable {}
extension Roam.LocationAccuracy : Swift.Hashable {}
extension Roam.LocationAccuracy : Swift.RawRepresentable {}
extension Roam.Reachability.NetworkStatus : Swift.Equatable {}
extension Roam.Reachability.NetworkStatus : Swift.Hashable {}
extension Roam.Reachability.Connection : Swift.Equatable {}
extension Roam.Reachability.Connection : Swift.Hashable {}
extension Roam.CocoaMQTTConnAck : Swift.Equatable {}
extension Roam.CocoaMQTTConnAck : Swift.Hashable {}
extension Roam.CocoaMQTTConnAck : Swift.RawRepresentable {}
extension Roam.CocoaMQTTAUTHReasonCode : Swift.Equatable {}
extension Roam.CocoaMQTTAUTHReasonCode : Swift.Hashable {}
extension Roam.CocoaMQTTAUTHReasonCode : Swift.RawRepresentable {}
extension Roam.CocoaMQTTCONNACKReasonCode : Swift.Equatable {}
extension Roam.CocoaMQTTCONNACKReasonCode : Swift.Hashable {}
extension Roam.CocoaMQTTCONNACKReasonCode : Swift.RawRepresentable {}
extension Roam.CocoaMQTTDISCONNECTReasonCode : Swift.Equatable {}
extension Roam.CocoaMQTTDISCONNECTReasonCode : Swift.Hashable {}
extension Roam.CocoaMQTTDISCONNECTReasonCode : Swift.RawRepresentable {}
extension Roam.CocoaMQTTPUBACKReasonCode : Swift.Equatable {}
extension Roam.CocoaMQTTPUBACKReasonCode : Swift.Hashable {}
extension Roam.CocoaMQTTPUBACKReasonCode : Swift.RawRepresentable {}
extension Roam.CocoaMQTTPUBCOMPReasonCode : Swift.Equatable {}
extension Roam.CocoaMQTTPUBCOMPReasonCode : Swift.Hashable {}
extension Roam.CocoaMQTTPUBCOMPReasonCode : Swift.RawRepresentable {}
extension Roam.CocoaMQTTPUBRECReasonCode : Swift.Equatable {}
extension Roam.CocoaMQTTPUBRECReasonCode : Swift.Hashable {}
extension Roam.CocoaMQTTPUBRECReasonCode : Swift.RawRepresentable {}
extension Roam.CocoaMQTTPUBRELReasonCode : Swift.Equatable {}
extension Roam.CocoaMQTTPUBRELReasonCode : Swift.Hashable {}
extension Roam.CocoaMQTTPUBRELReasonCode : Swift.RawRepresentable {}
extension Roam.CocoaMQTTSUBACKReasonCode : Swift.Equatable {}
extension Roam.CocoaMQTTSUBACKReasonCode : Swift.Hashable {}
extension Roam.CocoaMQTTSUBACKReasonCode : Swift.RawRepresentable {}
extension Roam.CocoaMQTTUNSUBACKReasonCode : Swift.Equatable {}
extension Roam.CocoaMQTTUNSUBACKReasonCode : Swift.Hashable {}
extension Roam.CocoaMQTTUNSUBACKReasonCode : Swift.RawRepresentable {}
extension Roam.CocoaRetainHandlingOption : Swift.Equatable {}
extension Roam.CocoaRetainHandlingOption : Swift.Hashable {}
extension Roam.CocoaRetainHandlingOption : Swift.RawRepresentable {}
extension Roam.PayloadFormatIndicator : Swift.Equatable {}
extension Roam.PayloadFormatIndicator : Swift.Hashable {}
extension Roam.PayloadFormatIndicator : Swift.RawRepresentable {}
extension Roam.FailedCheck : Swift.Equatable {}
extension Roam.FailedCheck : Swift.Hashable {}
extension Roam.CocoaMQTTPropertyName : Swift.Equatable {}
extension Roam.CocoaMQTTPropertyName : Swift.Hashable {}
extension Roam.CocoaMQTTPropertyName : Swift.RawRepresentable {}
extension Roam.formatInt : Swift.Equatable {}
extension Roam.formatInt : Swift.Hashable {}
extension Roam.formatInt : Swift.RawRepresentable {}
extension Roam.Model : Swift.Equatable {}
extension Roam.Model : Swift.Hashable {}
extension Roam.Model : Swift.RawRepresentable {}
extension Roam.RoamTrackingState : Swift.Equatable {}
extension Roam.RoamTrackingState : Swift.Hashable {}
extension Roam.RoamTrackingState : Swift.RawRepresentable {}
extension Roam.RoamSubscribe : Swift.Equatable {}
extension Roam.RoamSubscribe : Swift.Hashable {}
extension Roam.RoamSubscribe : Swift.RawRepresentable {}
extension Roam.RoamNetworkState : Swift.Equatable {}
extension Roam.RoamNetworkState : Swift.Hashable {}
extension Roam.RoamNetworkState : Swift.RawRepresentable {}
extension Roam.RoamTrackingMode : Swift.Equatable {}
extension Roam.RoamTrackingMode : Swift.Hashable {}
extension Roam.CocoaMQTTLoggerLevel : Swift.Equatable {}
extension Roam.CocoaMQTTLoggerLevel : Swift.Hashable {}
extension Roam.CocoaMQTTLoggerLevel : Swift.RawRepresentable {}
extension Roam.CocoaMQTTError : Swift.Equatable {}
extension Roam.CocoaMQTTError : Swift.Hashable {}
